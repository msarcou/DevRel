name: Build and Promote Go Challenge

on:
  push:
  workflow_dispatch:

env:
  GO_VERSION: 1.22.12
  JF_URL: https://trialsar.jfrog.io
  JFROG_REPO: go-local
  BUILD_NAME_DEV: go-challenge-build-DEV
  BUILD_NAME_STAGING: go-challenge-build-STAGING

jobs:
  build-dev:
    name: Build in DEV
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go ${{ env.GO_VERSION }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('Go_Challenge/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Prepare Go module
        run: |
          cd Go_Challenge
          go mod init github.com/your-org/challenge || true
          go mod tidy

      - name: Build Go binary
        run: |
          cd Go_Challenge
          go build -v -o challenge challenge.go

      - name: Set up JFrog CLI with OIDC
        uses: jfrog/setup-jfrog-cli@v4
        with:
          oidc-provider-name: github
          custom-server-id: artifactory-prod
          oidc-audience: jfrog-github
        env:
          JF_URL: ${{ env.JF_URL }}
          JFROG_CLI_AVOID_NEW_VERSION_WARNING: true

      - name: Collect build info
        run: jf rt bce "${{ env.BUILD_NAME_DEV }}" "${{ github.run_number }}"

      - name: Upload binary to Artifactory (DEV)
        run: |
          cd Go_Challenge
          jf rt upload "challenge" "${{ env.JFROG_REPO }}/challenge-go/DEV/${{ github.sha }}/" \
            --build-name="${{ env.BUILD_NAME_DEV }}" \
            --build-number="${{ github.run_number }}"

      - name: Set property environment=DEV
        run: |
          jf rt sp "${{ env.JFROG_REPO }}/challenge-go/DEV/${{ github.sha }}/challenge" "environment=DEV"

      - name: Publish build info
        run: jf rt bp "${{ env.BUILD_NAME_DEV }}" "${{ github.run_number }}"

      - name: Scan build with Xray
        run: jf bs "${{ env.BUILD_NAME_DEV }}" "${{ github.run_number }}"

  promote-to-staging:
    name: Promote to STAGING
    runs-on: ubuntu-latest
    needs: build-dev

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Set up JFrog CLI with OIDC
        uses: jfrog/setup-jfrog-cli@v4
        with:
          oidc-provider-name: github
          custom-server-id: artifactory-prod
          oidc-audience: jfrog-github
        env:
          JF_URL: ${{ env.JF_URL }}
          JFROG_CLI_AVOID_NEW_VERSION_WARNING: true

      - name: Copy artifact from DEV to STAGING
        run: |
          jf rt cp \
            "${{ env.JFROG_REPO }}/challenge-go/DEV/${{ github.sha }}/challenge" \
            "${{ env.JFROG_REPO }}/challenge-go/STAGING/${{ github.sha }}/challenge"

      - name: Set property environment=STAGING
        run: |
          jf rt sp "${{ env.JFROG_REPO }}/challenge-go/STAGING/${{ github.sha }}/challenge" "environment=STAGING"

      - name: Promote build info (optional)
        run: |
          jf rt bce "${{ env.BUILD_NAME_STAGING }}" "${{ github.run_number }}"
          jf rt bp "${{ env.BUILD_NAME_STAGING }}" "${{ github.run_number }}"
